#--------------- Grouplib: GNU Make Grouped-Target Library --------------------#
#
# Written by Nicholas Clark on 11-November-2014.
# Released under the terms of the GNU Public License version 2.
#
# Grouplib is a pure GNU Make library that provides a set of user functions
# (which can be called with GNU Make's 'call' command) for managing 
# multi-target recipes.
#
# It provides an automagic implementation of the 'sentinel' design
# pattern, where .sentinel files are used to handle dependency-tracking
# on groups of targets that are generated by a single recipe.
#
# This library provides an automatic version of the following pattern:
#
#         TASK1_SRCS = foo bar
#         baz bob: .sentinels/_task1.sentinel
#
#         .sentinels/_task1.sentinel: foo bar
#             touch baz bob
#             touch .sentinels/_task1.sentinel
#
#         rocklop: baz bob
#             touch rocklop
#
# Grouplib automatically generates and tracks the sentinel file(s) for
# your target group(s), and also adds a special conditionial phony target
# that forces a rebuild if any of the files are missing (to harden your
# build against external interference or flaky toolchains).
#
# With this library, the example above becomes:
# 
#         include groups.mk
#         
#         $(call group_create,task1,$(TASK1_SRCS),baz bob)
#         $(call group,task1): $(call group_deps,task1):
#             touch baz bob
#             $(call group_finish,task1)
#
#		  rocklop: $(call group_outputs,task1)
#		      touch rocklop
#
# You can make as many groups as you want - this library will keep them all
# straight and keep your dependencies managed.
#
# The functions provided by Grouplib are as follows:
# 
# Normal use cases:
#
# $(call group_create,groupname,group_deps,group_outputs)
#     Creates a target group.
# 
# $(call group,groupname)
#     Returns a handle to the target group's semaphore. Can be used
#     to represent all of the group's outputs. Should be used as the sole
#     target of the recipe that builds the target group.
# 
# $(call group_deps,groupname)
#     Returns a list of the group's dependencies. If any of the group's
#     outputs are missing, this list includes a special PHONY target that
#     forces a rebuild of the target group.
#
# $(call group_finish,groupname)
#     Should be called as the last step in the target-group's recipe.
#     Creates the sentinel directory if it is missing, and touches the
#     target-group's sentinel.
# 
# Advanced use cases:
#
# $(call group_outputs,groupname)
#     Convenience function for accessing the outputs assigned to the
#     group during group_create.
#
# $(call group_sentinel,groupname) 
# 	  Returns the name of the target-group's sentinel. Equivalent to
# 	  $(call group groupname).
# 
# $(call group_all_sentinels)
#     Returns a list of all sentinels currently being managed by
#     Grouplib. Can be added to a global 'clean' list if desired.
#
# $(call group_getdir)
#     Returns the directory currently being used by Grouplib
#     to store its sentinel files. This directory is user-selectable.
#
# $(call group_setdir,dirname)
#     Can be used to change Grouplib's sentinel directory to a
#     user-specified value.
#
# $(call group_get_phonies)
#     Provides a list of Grouplib's phony targets, so that they
#     can be added to a .PHONY call if necessary. Note that in
#     most cases, it won't be necessary to add them.
#
##----------------------- GNU Make Version Checker ---------------------------#

# Version 4.0 is believed to be the oldest version of GNU make
# that will work with these extensions.

$(if $(shell which printf && echo OK),,\
$(error extension needs a working printf command))
$(if $(shell which bc && echo OK),,\
$(error extension needs a working bc command))

_MVER := $(MAKE_VERSION)
_MVER := $(foreach x,$(subst ., ,$(_MVER)),$(shell printf "%04d" $(x)))
_MVER := $(wordlist 1,2,$(_MVER))
_MVER := $(shell printf "%d.%s" $(word 1,$(_MVER)) $(word 2,$(_MVER)))
ifeq (0,$(shell echo "$(_MVER) > 4.0" | bc))
$(error GNU Make version 4.0 or higher is required)
endif

#------------------------------------------------------------------------#

# These variables are used internally. The sentinel storage directory
# can also be manually set through the use of group_setdir, if the
# default (.sentinels) isn't acceptable in your build.

_SENTINEL_DIR := .sentinels
_SENTINEL_LIST :=

# _smissing accepts a list of input filenames, and returns a list of
# any files that are missing (or an empty string otherwise)

_smissing = $(strip $(foreach x,$(1),$(if $(wildcard $(x)),,$(x))))

_ssentinel_name = $(_SENTINEL_DIR)/_$(1).sentinel
_sdepends_name = _GROUP_$(1)_DEPENDS
_soutputs_name = _GROUP_$(1)_OUTPUTS
_sphony = _GROUP_$(1)_PHONY
_sdepends = $(value $(call _sdepends_name,$(1)))
_soutputs = $(value $(call _soutputs_name,$(1)))
_sverify = $(if $(call _smissing,$(call _soutputs,$(1))),$(call _sphony,$(1)),)

define _smkgroup_code =
$(if $(filter $(1),$(_SENTINEL_LIST)),$(error group '$(1)' is already defined),)
_SENTINEL_LIST := $(strip $(_SENTINEL_LIST) $(1))
$(if $(3),,$(error group '$(1)' outputs not defined))
$(if $(2),,$(warning group '$(1)' sources not defined))
$(if $(1),,$(error group-name not provided for $(3)))
$(3): $(call _ssentinel_name,$(1))
$(call _sphony,$(1)):

$(call _sdepends_name,$(1)) := $(2)
$(call _soutputs_name,$(1)) := $(3)
endef

define _sgroup_finish =
@mkdir -p $(_SENTINEL_DIR)
@touch $(call _ssentinel_name,$(1))
endef

group_create = $(eval $(call _smkgroup_code,$(1),$(2),$(3)))
group = $(call _ssentinel_name,$(1))
group_deps = $(call _sdepends,$(1)) $(call _sverify,$(1))
group_finish = $(call _sgroup_finish,$(1))

group_outputs = $(call _soutputs,$(1))
group_sentinel = $(call _ssentinel_name,$(1))

group_all_sentinels = $(_SENTINEL_LIST)
group_getdir = $(_SENTINEL_DIR)
group_setdir = $(eval _SENTINEL_DIR := $(1))
group_get_phonies = $(foreach x,$(_SENTINEL_LIST),$(call _sphony,$(x)))
